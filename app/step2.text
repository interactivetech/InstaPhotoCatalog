View and Template:

view: "ng-app=InstaCatalogApp" projection of model through HTML templaye

    -when changes, angular refreshes appropriate binding points,
    which updates the view

    Note: InstagramListCtrl is contained in
    the module defined in ng-app


    in the hardcoded list tag, added an:

    ngRepeat directive: "phone in phones", a angular repeater
    directive, tells angular to create a li> element for eacgh
    phone in list using <li> tag as template

    Angular expressions ({{phone.name}}, {{phone.snippet}})
    will be replaced by the value of expressions

    Also, added a directive (ng-controller) which attaches the controller
    PhoneListCtrl controller to <body> tag

    the angular expressions declared denote data bondings
    ->which refer to application model that us set up on PhoneListController

    
    Model and Controller:
    
    the data model is instantiated in the InstagramListCtrl 
    controller is a constructor function that takes a $scope parameter
    
    look in the app.js file for more notes on Model and Controller
    
    note: ng-app directive (on the <html> tag)  specifies the InstaCatalogApp module 
    name as the module to load when bootstrapping the Angular application.
    
    controller provides context for data model, establishes data-binding between the model abd view
    
    we link the html to the controller using the directive ngDirective
    
    InstagramListCtrl controller attaches the data to $scope that was injected into our
    controller functoion
    
    $scope: prototypical descendant of the scope that was created when the app was defined
    
    controller scope accessible to all bindings localed where was defined in the html
    i.e. within the <body> tag
    
    Scope:
    angular uses scopes to keep models and views seperate but in sync
    
    note: $scope keeps info contained in template, data model, and controller in sync
    
    any changes occur in view will update in model, and any change in model will update view
    
    
    
    
    TO DO:
     Tests (2)
     
     Writing and Running Tests:
     
     gular developers prefer the syntax of Jasmine's Behavior-driven Development
      (BDD) framework when writing test
      
      *can learn about Jasmine on the Jasmine home page and at the Jasmine docs.
      
      run unit tests using Karma
      
      To run the tests, and then watch the files for changes: npm test.
     
     
   Would like TO DO: complete testing section by actual testing